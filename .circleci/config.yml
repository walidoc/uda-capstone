version: 2.1
jobs:
  lint-app:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint    

  build-push-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PWD 
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build and push docker image
          command: |
            # Build image and add a descriptive tag
            docker build --tag=uda-cap .
            # List docker images
            docker image ls
            #Login to docker hub
            docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PWD
            # Push image to a docker repository
            docker tag uda-cap walidoc/uda-cap
            docker push walidoc/uda-cap
            
  deploy-to-cluster:
    docker:
      - image: alpine/k8s:1.15.12
    steps:
      - checkout
      - run:
          name: create kubernetes cluster
          no_output_timeout: 30m
          command: |
            # using cli to be able to specify unique name for cluster
            eksctl create cluster --name="uda-cap-1" \
            --region=eu-central-1 \
            # --node-type=t3.medium

            #deploy docker image to the cluster
            kubectl apply -f deployment.yml
            echo "Get Deployments =========="
            kubectl get deployments
            
            echo "Rolling deployment ========"
            kubectl set image deployments/uda-cap uda-cap=walidoc/uda-cap:v2
            
            echo "Rolling deployment status ============"
            kubectl rollout status deployment/uda-cap
            
            echo "Get Deployments after rolling updates ==============="
            kubectl get deployments

            #delete cluster
            # eksctl delete cluster --name uda-cap-1 --region eu-central-1
      - run:
          name: Delete cluster
          command: eksctl delete cluster --name uda-cap-1 --region eu-central-1
          when: on_fail

workflows:
  default:
    jobs:
      - lint-app
      - build-push-docker-image:
          requires: [lint-app]
      - deploy-to-cluster:
          requires: [build-push-docker-image]